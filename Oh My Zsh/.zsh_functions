# ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
# ↓↓↓↓↓↓↓↓↓ Functions ↓↓↓↓↓↓↓↓↓↓↓↓
# ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

### FileSearch ###
f() { find . -iname "*$1*" ${@:2} }
r() { grep "$1" ${@:2} -R . }

### mkdir and cd ###
mkcd() { mkdir -p "$@" && cd "$_"; }

### Terminal color table ###
colors_terminal()
{
    # ⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿
    # Written by Daniel Crisman, found and copied from http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
    # ⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿⦿

    #   This file echoes a bunch of color codes to the
    #   terminal to demonstrate what's available.  Each
    #   line is the color code of one forground color,
    #   out of 17 (default + 16 escapes), followed by a
    #   test use of that color on all nine background
    #   colors (default + 8 escapes).

    echo -e "\n                 40m     41m     42m     43m     44m     45m     46m     47m";

    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
    '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
    '  36m' '1;36m' '  37m' '1;37m';
    do FG=${FGs// /}
        echo -en " $FGs \033[$FG  gYw  "
        for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
            do echo -en "$EINS \033[$FG\033[$BG  gYw  \033[0m";
        done
        echo;
    done
    echo

    echo -e "  \033[0mNC (No color)"
    echo -e "  \033[1;37mWHITE\t\033[0;30mBLACK"
    echo -e "  \033[0;34mBLUE\t\033[1;34mLIGHT_BLUE"
    echo -e "  \033[0;32mGREEN\t\033[1;32mLIGHT_GREEN"
    echo -e "  \033[0;36mCYAN\t\033[1;36mLIGHT_CYAN"
    echo -e "  \033[0;31mRED\t\033[1;31mLIGHT_RED"
    echo -e "  \033[0;35mMAGENTA\t\033[1;35mLIGHT_MAGENTA"
    echo -e "  \033[0;33mYELLOW\t\033[1;33mLIGHT_YELLOW"
    echo -e "  \033[1;30mGRAY\t\033[0;37mLIGHT_GRAY"
}

### 256 colors in ZSH ###
# @see http://www.commandlinefu.com/commands/view/5876/show-numerical-values-for-each-of-the-256-colors-in-zsh
# @see https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg
colors_zsh()
{
    echo
    echo " \e[38;05;255m\ue22b\e[m ZSH COLORS"
    echo
    for code ({000..255}) print -P -- "$code:%F{$code} This is how your text would look like%f"
}

### Update plugins ###
# update_zsh_custom_plugins()
# {
#     local zsh_plugins="${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins"

#     echo
#     cd ${zsh_plugins}/zsh-completions && git pull &>/dev/null && cd - &>/dev/null
#     echo -e "\033[32m [zsh-completions] Updated ✅\033[0m \n"

#     cd ${zsh_plugins}/zsh-autosuggestions && git pull &>/dev/null && cd - &>/dev/null
#     echo -e "\033[32m [zsh-autosuggestions] Updated ✅\033[0m \n"

#     cd ${zsh_plugins}/zsh-syntax-highlighting && git pull &>/dev/null && cd - &>/dev/null
#     echo -e "\033[32m [zsh-syntax-highlighting] Updated ✅\033[0m"
# }

# Turn hidden files on/off in Finder
# [(⌘CMD) + (⇧ SHIFT) + (.)] - keyboard shortcut.
hiddenOn() { defaults write com.apple.finder AppleShowAllFiles TRUE; }
hiddenOff() { defaults write com.apple.Finder AppleShowAllFiles FALSE; }

# Permissions
chf() { find $1 -type f -exec chmod 0644 {} \; }
chd() { find $1 -type d -exec chmod 0755 {} \;}

######
## FZF
######

# GIT LOG + FZF (Preview) (Shows all diff in the same logging location and fzf filtering)
# @see https://gist.github.com/akatrevorjay/9fc061e8371529c4007689a696d33c62
gitPreview() {
    # LOG
    local g=(git log --graph --format='%C(auto)%h%d %s %C(white)%C(bold)%cr' --color=always "$@")

    # FZF
    local fzf=(
        fzf
            --ansi
            --reverse
            --height 90%
            --tiebreak=index
            --no-sort
            --bind=ctrl-s:toggle-sort
            --preview 'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1; }; f {}'
    )

    $g | $fzf
}

## GIT commit browser with previews
gitShowPreview() {
    local _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    local _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"

    git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@" |
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview $_viewGitLogLine \
                --header "enter to view, alt-y to copy hash" \
                --bind "enter:execute:$_viewGitLogLine | less -R" \
                --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

# FE [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
    local files
    IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
    [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# Install (one or multiple) selected application(s)
# using "brew search" as source input
# mnemonic [B]rew [I]nstall [P]lugin
bip() {
    local inst=$(brew search | fzf -m)

    if [[ $inst ]]; then
        for prog in $(echo $inst);
        do; brew install $prog; done;
    fi
}

# Update (one or multiple) selected application(s)
# mnemonic [B]rew [U]pdate [P]lugin
bup() {
    local upd=$(brew leaves | fzf -m)

    if [[ $upd ]]; then
        for prog in $(echo $upd);
        do; brew upgrade $prog; done;
    fi
}

# Delete (one or multiple) selected application(s)
# mnemonic [B]rew [C]lean [P]lugin (e.g. uninstall)
bcp() {
    local uninst=$(brew leaves | fzf -m)

    if [[ $uninst ]]; then
        for prog in $(echo $uninst);
        do; brew uninstall $prog; done;
    fi
}

# Fkill - Kill Process
fkill() {
    local pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}

## Chrome history from CLI
ch() {
    local cols sep google_history open
    cols=$(( COLUMNS / 3 ))
    sep='{::}'

    if [ "$(uname)" = "Darwin" ]; then
        google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
        open=open
    else
        google_history="$HOME/.config/google-chrome/Default/History"
        open=xdg-open
    fi

    cp -f "$google_history" /tmp/h

    sqlite3 -separator $sep /tmp/h \
        "select substr(title, 1, $cols), url
        from urls order by last_visit_time desc" |
    awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
    fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}
